name: Techmino CI

on:
  push:
    branches: [main, ci*]
    tags: [pre*, v*]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: ${{ fromJSON('["dev", "release"]')[startsWith(github.ref, 'refs/tags/v')] }}
  CORE_LOVE_PACKAGE_PATH: ./core.love
  CORE_LOVE_ARTIFACT_NAME: core_love_package

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      app-name: ${{ steps.app-info.outputs.app-name }}
      version-name: ${{ steps.app-info.outputs.version-name }}
      version-string: ${{ steps.app-info.outputs.version-string }}
      version-code: ${{ steps.app-info.outputs.version-code }}
      update-title: ${{ steps.app-info.outputs.update-title }}
      update-note: ${{ steps.app-info.outputs.update-note }}
      commit-hash: ${{ steps.git-info.outputs.commit-hash }}
      base-name: ${{ steps.assemble-base-name.outputs.base-name }}
    steps:
      - uses: actions/checkout@v3
      - name: Install lua
        run: |
          sudo apt-get install lua5.3 -y
      - name: Get app info
        id: app-info
        shell: lua {0}
        run: |
          local version = require "version"
          os.execute('echo "app-name=VSPoyo" >> $GITHUB_OUTPUT')
          os.execute('echo "version-name=' .. version.name .. '" >> $GITHUB_OUTPUT')
          os.execute('echo "version-string=' .. version.string:gsub("%a", "") .. '" >> $GITHUB_OUTPUT')
          os.execute('echo "version-code=' .. tostring(version.code) .. '" >> $GITHUB_OUTPUT')
      - name: Assemble package base name
        id: assemble-base-name
        shell: bash
        run: |
          BASE_NAME=VSPoyo_${{ steps.app-info.outputs.version-string }}
          echo "base-name=$BASE_NAME" >> $GITHUB_OUTPUT
  build-core:
    runs-on: ubuntu-latest
    needs: get-info
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Process app name
        id: process-app-name
        shell: python3 {0}
        run: |
          import os
          import re
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
            f.write('product-name=' + re.sub(r'[^A-Za-z0-9]+', '_', '${{ needs.get-info.outputs.app-name }}') + '\n')
      - uses: ./.github/actions/update-version
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        with:
          commit: ${{ needs.get-info.outputs.commit-hash }}
          type: snapshot
      - name: Build core love package
        uses: love-actions/love-actions-core@v1
        with:
          build-list: ./main.lua ./conf.lua ./project.lua ./version.lua ./README.md ./LICENSE ./assets ./funkin ./lib ./loxel
          package-path: ${{ env.CORE_LOVE_PACKAGE_PATH }}
      - name: Upload core love package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
          path: ${{ env.CORE_LOVE_PACKAGE_PATH }}
      - name: Rename love package
        run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          mv ${{ env.CORE_LOVE_PACKAGE_PATH }} ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.love
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Core_love
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.love
      - name: Prepare for release
        if: ${{ startsWith(github.ref, 'refs/tags/pre') || startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        run: |
          mkdir -p ${{ env.RELEASE_FOLDER }}
          cp ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.love ${{ env.RELEASE_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_Bare.love

  build-android:
    runs-on: ubuntu-latest
    needs: [get-info, build-core]
    if: github.event_name != 'pull_request'
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Process app name
        id: process-app-name
        shell: python3 {0}
        run: |
          import os
          import re
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
              f.write('bundle-id=org.saxashitter.' + re.sub(r'[^A-Za-z0-9]+', '_', '${{ needs.get-info.outputs.app-name }}') + '\n')
              f.write('product-name=' + re.sub(r'[^A-Za-z0-9]+', '-', '${{ needs.get-info.outputs.app-name }}') + '\n')
      - name: Download core love package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
      - name: Build Android packages
        id: build-packages
        uses: love-actions/love-actions-android@main
        with:
          app-name: ${{ needs.get-info.outputs.app-name }}
          bundle-id: ${{ steps.process-app-name.outputs.bundle-id }}
          love-package: ${{ env.CORE_LOVE_PACKAGE_PATH }}
          product-name: ${{ steps.process-app-name.outputs.product-name }}
          version-string: ${{ needs.get-info.outputs.version-string }}
          version-code: ${{ needs.get-info.outputs.version-code }}
          output-folder: ${{ env.OUTPUT_FOLDER }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Android_release
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}-release.apk

  build-linux:
    runs-on: ubuntu-latest
    needs: [get-info, build-core]
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Process app name
        id: process-app-name
        shell: python3 {0}
        run: |
          import os
          import re

          product_name = re.sub(r'[^A-Za-z0-9]+', '-', '${{ needs.get-info.outputs.app-name }}').strip('-').lower()
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
            f.write('bundle-id=org.26f-studio.' + product_name + '\n')
            f.write('product-name=' + product_name + '\n')
      - name: Download core love package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
      - name: Build Linux packages
        id: build-packages
        uses: love-actions/love-actions-linux@v1
        with:
          app-name: ${{ needs.get-info.outputs.app-name }}
          bundle-id: ${{ steps.process-app-name.outputs.bundle-id }}
          description: Rap against a black man, a white man, a cat, and more!
          version-string: ${{ needs.get-info.outputs.version-string }}
          love-package: ${{ env.CORE_LOVE_PACKAGE_PATH }}
          product-name: ${{ steps.process-app-name.outputs.product-name }}
          output-folder: ${{ env.OUTPUT_FOLDER }}
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Linux_AppImage
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.AppImage
      - name: Upload Debian artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Linux_Debian
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.deb

  build-macos-portable:
    runs-on: macos-latest
    needs: [get-info, build-core]
    if: github.event_name != 'pull_request'
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Process app name
        id: process-app-name
        shell: python3 {0}
        run: |
          import os
          import re
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
            f.write('bundle-id=org.26f-studio.vspoyo\n')
            f.write('product-name=' + re.sub(r'[^A-Za-z0-9]+', '_', '${{ needs.get-info.outputs.app-name }}') + '\n')
      - name: Download core love package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
      - name: Build macOS packages
        id: build-packages
        uses: love-actions/love-actions-macos-portable@v1
        with:
          app-name: ${{ needs.get-info.outputs.app-name }}
          bundle-id: ${{ steps.process-app-name.outputs.bundle-id }}
          love-package: ${{ env.CORE_LOVE_PACKAGE_PATH }}
          product-name: ${{ steps.process-app-name.outputs.product-name }}
          version-string: ${{ needs.get-info.outputs.version-string }}
          output-folder: ${{ env.OUTPUT_FOLDER }}
      - name: Upload pkg artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_macOS_portable_pkg
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.pkg
      - name: Upload dmg artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_macOS_portable_dmg
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.dmg
      - name: Upload bare artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_macOS_portable_bare
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.zip

  build-web:
    runs-on: ubuntu-latest
    needs: [get-info, build-core]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Download core love package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
      - name: Move core love package
        run: |
          mv ${{ env.CORE_LOVE_PACKAGE_PATH }} ./.github/build/web/game.data
      - name: Deploy to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          build_dir: ./.github/build/web/
          keep_history: false
          target_branch: web-dev
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Web_PWA
          path: ./.github/build/web/

  build-windows:
    runs-on: windows-latest
    needs: [get-info, build-core, auto-test]
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Process app name
        id: process-app-name
        shell: python3 {0}
        run: |
          import os
          import re
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
            f.write('product-name=' + re.sub(r'[^A-Za-z0-9]+', '_', '${{ needs.get-info.outputs.app-name }}') + '\n')
      - name: Download core love package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
      - name: Build Windows packages
        id: build-packages
        uses: love-actions/love-actions-windows@v1
        with:
          love-package: ${{ env.CORE_LOVE_PACKAGE_PATH }}
          product-name: ${{ steps.process-app-name.outputs.product-name }}
          app-id: ${{ secrets.WINDOWS_APP_ID }}
          output-folder: ${{ env.OUTPUT_FOLDER }}
      - name: Upload 32-bit artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Windows_x86
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_x86.zip
      - name: Upload 64-bit artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Windows_x64
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_x64.zip
      - name: Upload installer artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Windows_installer
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_installer.exe